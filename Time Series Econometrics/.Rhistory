install.packages("fGarch")
library(urca)
data("Raotbl3")
lc <- ts(lc, start=c(1966,4), frequency=4)
dlc <- diff(lc)
plot(dlc)
library(fGarch)
Raotbl3
lb <- Raotbl3[,"lc"]
lc <- ts(lc, start=c(1966,4), frequency=4)
dlc <- diff(lc)
plot(dlc)
lc <- Raotbl3[,"lc"]
lc <- ts(lc, start=c(1966,4), frequency=4)
dlc <- diff(lc)
plot(dlc)
library(fGarch)
fit <- garchFit(~ garch(1,1), data=dlc)
summary(fit)
fit@fitted
fit@h.t
plot(fit@h.t)
predict(fit, n.ahead=4)
library(urca)
data("Raotbl3")
lc <- Raotbl3[,"lc"]
lc <- ts(lc, start=c(1966,4), frequency=4)
dlc <- diff(lc)
plot(dlc)
library(fGarch)
fit <- garchFit(~ garch(1,1), data=dlc)
summary(fit)
fit@fitted
fit@h.t
plot(fit@h.t)
predict(fit, n.ahead=4)
plot(predict(fit, n.ahead=4))
fit
fit@h.t
fit@fitted
plot(fit@h.t)
predict(fit@h.t, n.ahead=4)
library(urca)
data("Raotbl3")
vec <- ca.jo(Raotbl3[, c("li","lc")])
## ca is for conintegration analysis ##
summary(vec)
dim(Raotbl3)
library(urca)
data("Raotbl3")
vec <- ca.jo(Raotbl3[, c("li","lc")])
## ca.jo stands for conintegration analysis johannsen test ##
summary(vec)
dim(Raotbl3)
vec <- ca.jo(Raotbl3[, c("li","lc")], ecdet = "const")
summary(vec)
vec <- ca.jo(Raotbl3[, c("li","lc")], ecdet = "trend")
summary(vec)
lc <- ts(Raotbl3$lc, start=c(1966,4), frequency=4)
li <- ts(Raotbl3$li, start=c(1966,4), frequency=4)
data.diff <- ts.intersect(diff(lc),diff(li))
z <- li - 0.98*lc
plot(z)
tsp(z)
library(tstools)
z1 <- lags(z,1)     ## Create lags for z1 ##
z1
est.data <- ts.intersect(data.diff, z1)
library(vars)
VAR(est.data[, c("data.diff.diff(lc)","data.diff.diff(li)")], exogen = est.data[,"z1"])
a <- matrix(NA, ncol=2, nrow = 2)
a
a[2,1] <- 0   ##Imposing restrcition##
b <- matrix(NA, ncol=2, nrow=2)
svec.fit <- SVEC(vec, SR=a, LR=b)
summary(svec.fit)
irf(svec.fit)
plot(irf(svec.fit))
vecm.eg<-VECM(data.diff)
library(tsDyn)
vecm.eg<-VECM(data.diff)
vecm.eg<-VECM(data.diff, lag = 2)
vecm.eg
plot(VECM(data.diff, lag = 2))
a
b
svec.fit
irf(VECM(data.diff, lag = 2))
plot(irf(VECM(data.diff, lag = 2)))
plot(irf(VECM(data.diff, lag = 1)))
n <-  10500 ## lots of trials
z <- rnorm(n) ## sample standard normal distribution variates
e <-  z ## store variates
y <-  z ## store again in a different place
sig2 <-  z^2 ## create volatility series
omega <-  1 ## base variance
alpha <-  0.55 ## Markov dependence on previous variance
phi <-  0.8 ## mMarkov dependence on previous period
mu <-  0.1 ## average return
omega/(1-alpha) ; sqrt(omega/(1-alpha))
set.seed("1012")
for (t in 2:n) ## Because of lag start at second date
{
e[t] <- sqrt(sig2[t])*z[t]          ## 1. e is conditional on sig
y[t] <-  mu + phi*(y[t-1]-mu) + e[t] ## 2. generate returns
sig2[t+1] <-  omega + alpha * e[t]^2 ## 3. generate new sigma^2 to feed 1.
}
par(mfrow = c(2, 4))
plot(z[10001:n], type = "l", xlab = "t",
ylab = expression(epsilon), main = "1. Simple noise")
plot(sqrt(sig2[10000:n]), type = "l",
xlab = "t", ylab = expression(sigma[t]),
main = "2. Conditional sigma")
plot(e[10001:n], type = "l", xlab = "t",
ylab = "a", main = "3. ARCH")
plot(y[10001:n], type = "l", xlab = "t",
ylab = "y", main = "4. AR+ARCH")
acf(e[10001:n], main = "5. ARCH")
acf(abs(e[10001:n]), main = "6. Absolute ARCH value")
acf(y[10001:n], main = "7. AR+ARCH")
acf(abs(y[10001:n]), main = "8. Absolute AR+ARCH value")
require(rugarch)
require(qrmdata)
require(xts)
install.packages("rugrach")
install.packages("xts")
install.packages("xts")
data("EUR_USD")
data("GBP_USD")
require(xts)
data("EUR_USD")
data("GBP_USD")
require(rugarch)
require(qrmdata)
require(xts)
data("EUR_USD")
data("GBP_USD")
install.packages(c("quantmod","rugarch","rmgarch"))
library(quantmod)
library(rugarch)
library(rmgarch)
install.packages("zoo")
install.packages("zoo")
startDate = as.Date("2007-01-03")
endDate = as.Date("2018-04-30")
getSymbols("IBM", from = startDate, to = endDate)
head(IBM)
rIBM <- dailyReturn(IBM)
np.random.seed(13)
a0 = 2
a1 = .5
y = w = np.random.normal(size=1000)
Y = np.empty_like(y)
for t in range(len(y)):
y[t] = w[t] * np.sqrt((a0 + a1*y[t-1]**2))
library(urca)
data("Raotbl3")
lc <- Raotbl3[,"lc"]
lc <- ts(lc, start=c(1966,4), frequency=4)
dlc <- diff(lc)
plot(dlc)
## There is volatility based on the plot ##
library(fGarch)
fit <- garchFit(~ garch(1,1), data=dlc)
summary(fit)
## Swiss Pension func Index -
x = as.timeSeries(data(LPP2005REC))
## garchFit
fit = garchFit(LPP40 ~ garch(1, 1), data = 100*x, trace = FALSE)
fit
## volatility -
# Standard Deviation:
volatility = volatility(fit, type = "sigma")
volatility = volatility(fit, type = "sigma")
head(volatility)
class(volatility)
# Variance:
volatility = volatility(fit, type = "h")
head(volatility)
class(volatility)
## slot -
volatility = slot(fit, "sigma.t")
head(volatility)
class(volatility)
volatility = slot(fit, "h.t")
head(volatility)
class(volatility)
x
library(quantmod)
library(ggplot2)
library(broom)
getSymbols(c('SPY'))
View(SPY)
View(SPY)
SPY              <- SPY$SPY.Adjusted
SPYRet           <- log(SPY) - log(lag(SPY))
SPYRet_xts       <- SPYRet
colnames(SPYRet) <- c('SPY')
SPYRet           <- tidy(SPYRet)
ggplot(SPYRet, aes(x = index, y = value, color = series)) +
geom_line() +
theme_bw() +
labs(title = "SPY Returns Returns from 2007 to 2017", x = "")
ggplot(SPYRet, aes(x = index, y = AbsoluteReturns, color = series)) +
geom_line() +
theme_bw() +
labs(title = "SPY Absolute Value of Returns from 2007 to 2017", x = "")
library(tibble)
SPYRet <- add_column(SPYRet, SquaredReturns = SPYRet$value^2, AbsoluteReturns = abs(SPYRet$value))
ggplot(SPYRet, aes(x = index, y = AbsoluteReturns, color = series)) +
geom_line() +
theme_bw() +
labs(title = "SPY Absolute Value of Returns from 2007 to 2017", x = "")
ggplot(SPYRet, aes(x = index, y = SquaredReturns, color = series)) +
geom_line() +
theme_bw() +
labs(title = "SPY Squared Returns from 2007 to 2017", x = "")
garch11        <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 1), include.mean = TRUE),
distribution.model = "norm")
library(rugarch)
garch11        <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 1), include.mean = TRUE),
distribution.model = "norm")
garchfit       <- ugarchfit(spec = garch11, data = SPYRet_xts["2007-02-01/"], solver = "hybrid")
garchfit
spec           <- getspec(garchfit)
setfixed(spec) <- as.list(coef(garchfit))
garchforecast1 <- ugarchforecast(spec, n.ahead = 1, n.roll = 2499, data = SPYRet_xts["2007-02-01/"], out.sample = 2500)
plot(garchforecast1, which = 4)
garchfit
getspec
library(urca)
data("Raotbl3")
lc <- Raotbl3[,"lc"]
lc <- ts(lc, start=c(1966,4), frequency=4)
dlc <- diff(lc)
plot(dlc)
library(fGarch)
fit <- garchFit(~ garch(1,1), data=dlc)
summary(fit)
source('~/GitHub/sardar/Time Series Econometrics/Johanssen Test.R')
